.container {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.input {
  position: relative;
  width: 40vw;

  &:not(:last-child) {
    margin-bottom: 5rem;
  }

  /* generic */
  --gutterSm: 0.4rem;
  --gutterMd: 0.8rem;
  --gutterLg: 1.6rem;
  --gutterXl: 2.4rem;
  --gutterXx: 7.2rem;
  --fontSizeSm: 1.2rem;
  --fontSizeMd: 1.6rem;
  --fontSizeLg: 2.1rem;
  --fontSizeXl: 2.8rem;
  --fontSizeXx: 3.6rem;
  --lineHeightSm: 1.1;
  --lineHeightMd: 1.8;
  --transitionDuration: 300ms;
  --transitionTF: cubic-bezier(0.645, 0.045, 0.355, 1);

  /* floated labels */
  --inputPaddingV: var(--gutterMd);
  --inputPaddingH: var(--gutterLg);
  --inputFontSize: var(--fontSizeLg);
  --inputLineHeight: var(--lineHeightMd);
  --labelScaleFactor: 0.8;
  --labelDefaultPosY: 50%;
  --labelTransformedPosY: calc(
    (var(--labelDefaultPosY)) - (var(--inputPaddingV) * var(--labelScaleFactor)) -
      (var(--inputFontSize) * var(--inputLineHeight))
  );
  --labelAreaDefaultPosY: 50%;
  --halfOfRows: 2;
  --labelAreaTransformedPosY: calc(
    (var(--labelAreaDefaultPosY)) -
      (var(--inputPaddingV) * var(--labelScaleFactor) * 4) -
      (var(--inputFontSize) * var(--inputLineHeight) * var(--halfOfRows))
  );
  --inputTransitionDuration: var(--transitionDuration);
  --inputTransitionTF: var(--transitionTF);

  .inputText {
    display: block;
    margin: 0;
    padding: var(--inputPaddingV) var(--inputPaddingH);
    color: inherit;
    width: 100%;
    font-family: inherit;
    font-size: var(--inputFontSize);
    font-weight: inherit;
    line-height: var(--inputLineHeight);
    border: none;
    border-radius: 0.4rem;
    transition: box-shadow var(--transitionDuration);

    &::placeholder {
      color: #b0bec5;
    }

    &:focus {
      outline: none;
      box-shadow: 0.2rem 0.4rem 1.6rem #aaa;
    }
  }

  .inputLabel,
  .inputAreaLabel {
    display: block;
    position: absolute;
    bottom: 50%;
    left: 1rem;
    color: #333;
    font-family: inherit;
    font-size: var(--inputFontSize);
    font-weight: inherit;
    line-height: var(--inputLineHeight);
    opacity: 0;
    transform: translate3d(0, var(--labelDefaultPosY), 0) scale(1);
    transform-origin: 0 0;
    transition: opacity var(--inputTransitionDuration) var(--inputTransitionTF),
      transform var(--inputTransitionDuration) var(--inputTransitionTF),
      visibility 0ms var(--inputTransitionDuration) var(--inputTransitionTF),
      z-index 0ms var(--inputTransitionDuration) var(--inputTransitionTF);
  }

  .inputAreaLabel {
    transform: translate3d(0, var(--labelAreaDefaultPosY), 0) scale(1);
  }

  .inputText:placeholder-shown + .inputLabel,
  .inputText:placeholder-shown + .inputAreaLabel {
    visibility: hidden;
    z-index: -1;
  }

  .inputText:not(:placeholder-shown) + .inputLabel,
  .inputText:focus:not(:placeholder-shown) + .inputLabel {
    visibility: visible;
    z-index: 1;
    opacity: 1;
    transform: translate3d(0, var(--labelTransformedPosY), 0)
      scale(var(--labelScaleFactor));
    transition: transform var(--inputTransitionDuration), visibility 0ms,
      z-index 0ms;
  }

  .inputText:not(:placeholder-shown) + .inputAreaLabel,
  .inputText:focus:not(:placeholder-shown) + .inputAreaLabel {
    visibility: visible;
    z-index: 1;
    opacity: 1;
    transform: translate3d(0, var(--labelAreaTransformedPosY), 0)
      scale(var(--labelScaleFactor));
    transition: transform var(--inputTransitionDuration), visibility 0ms,
      z-index 0ms;
  }
}
